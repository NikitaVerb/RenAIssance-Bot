from datetime import datetime, timedelta

from aiogram import Router, types, F, Bot
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery

from db import get_user_account, get_user_expiration_date, get_account_password, \
    get_used_backup_account_date, get_user_backup_account, get_backup_account_password, check_user_in_db, \
    check_user_backup_account
from keyboards import backup_account_inline_kb, requests_have_ended_inline_kb, \
    reg_from_profile_inline_markup

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞
@router.callback_query(F.data.startswith('profile'))
async def profile(callback: CallbackQuery, bot: Bot):
    if not (await check_user_in_db(callback.from_user.id)):
        await bot.edit_message_text(chat_id=callback.message.chat.id,
                                    message_id=callback.message.message_id, text=
                                    f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏,'
                                    f' —Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
                                    , reply_markup=reg_from_profile_inline_markup())
        return
    await profile_handler(callback.message, callback.from_user.id, bot)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
async def profile_handler(message: types.Message, user_id: int, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    backup_account_inf: str = ''
    account_email = await get_user_account(user_id)
    if account_email:
        # –£–±–∏—Ä–∞–µ–º "_ind" –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if account_email.endswith('_ind'):
            account_email = account_email[:-4]
        text_account_email = f'<code>{account_email}</code> (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)'
    else:
        text_account_email = '—É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ ChatGPT'
    date_expiration = await get_user_expiration_date(user_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    password = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if date_expiration:
        expiration_date = datetime.strptime(date_expiration.strip(), '%Y-%m-%d').date()
        if expiration_date > datetime.now().date():
            # –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å
            password = await get_account_password(account_email)
            if await check_user_backup_account(user_id):
                email_backup_account = await get_user_backup_account(user_id)
                backup_account_password = await get_backup_account_password(email_backup_account)
                backup_account_inf = (
                    f"\n\n<b>==============================</b>\n"
                    f"<b><i>–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç</i></b>\n\n"
                    f"<b><i>–õ–æ–≥–∏–Ω:</i></b> <code>{email_backup_account or ''}</code>\n"
                    f"<b><i>–ü–∞—Ä–æ–ª—å:</i></b> <code>{backup_account_password or ''}</code>\n"
                    f"<b>==============================</b>")
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç d-m-y
        day = expiration_date.day
        month = expiration_date.month
        year = expiration_date.year
        formatted_expiration_date = f"{day}.{month}.{year}"
    else:
        formatted_expiration_date = ''

    if date_expiration:
        cart = f"<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: <u>{formatted_expiration_date}</u></b>\n\n"
    else:
        cart = ''

    cart += f"ü™™ <b>–õ–æ–≥–∏–Ω ChatGPT:</b> {text_account_email}\n"  # –õ–æ–≥–∏–Ω –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if password:
        cart += f"<b>üîê –ü–∞—Ä–æ–ª—å:</b> <code>{password}</code> (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)"

    else:
        cart += f"<b>üîê –ü–∞—Ä–æ–ª—å:</b> –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ ChatGPT\n\n"

    cart += backup_account_inf
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.edit_message_text(chat_id=message.chat.id,
                                message_id=message.message_id, text=cart,
                                reply_markup=requests_have_ended_inline_kb(),
                                parse_mode=ParseMode.HTML)


@router.callback_query(F.data == "req_have_ended")
async def req_have_ended(callback: CallbackQuery, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
    backup_account_button = True
    user_id = callback.from_user.id

    date_expiration = await get_user_expiration_date(user_id)

    if not date_expiration or datetime.strptime(date_expiration.strip(), '%Y-%m-%d').date() < datetime.now().date():
        backup_account_button = False

    used_backup_account_date = await get_used_backup_account_date(user_id)

    if used_backup_account_date:
        used_backup_account_date = datetime.strptime(used_backup_account_date.strip(), '%Y-%m-%d %H:%M:%S')
        if used_backup_account_date + timedelta(days=3) > datetime.now():
            backup_account_button = False

    if backup_account_button:
        text = ("–ï—Å–ª–∏ —É –í–∞—Å –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, "
                "–¥–∞–Ω–Ω—ã–µ –æ—Ç –Ω–µ–≥–æ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è.\n"
                "–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 3 –¥–Ω—è.")
    else:
        text = ("–í—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç,"
                " –∫–Ω–æ–ø–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏  3-—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –µ—ë –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è.")

    await bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                text=text, reply_markup=backup_account_inline_kb(backup_account_button))
