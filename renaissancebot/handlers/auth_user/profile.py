from datetime import datetime, timedelta

from aiogram import Router, types, F, Bot
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery

from db import get_user_account, get_user_expiration_date, get_account_password, \
    get_used_backup_account_date, get_user_backup_account, get_backup_account_password, check_user_in_db, \
    check_user_backup_account
from keyboards import backup_account_inline_kb, requests_have_ended_inline_kb, \
    reg_from_profile_inline_markup, back_to_menu_inline_kb, menu_and_catalog_inline_kb

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data.startswith('profile'))
async def profile(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not await check_user_in_db(user_id):
        await bot.edit_message_text(chat_id=callback.message.chat.id,
                                    message_id=callback.message.message_id,
                                    text='–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ—ë —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.',
                                    reply_markup=reg_from_profile_inline_markup())
        return


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    msg = bot.edit_message_text(chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id,
                                text='–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.'
                                     ' –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –æ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.',
                                reply_markup=menu_and_catalog_inline_kb())

    expiration_date = await get_user_expiration_date(user_id)
    if not expiration_date:
        await msg
        return
    elif datetime.strptime(expiration_date, '%Y-%m-%d').date() < datetime.now().date():
        await msg
        return

    await profile_handler(callback.message, user_id, bot)


async def profile_handler(message: types.Message, user_id: int, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    account_email = await get_user_account(user_id)
    expiration_date = datetime.strptime(await get_user_expiration_date(user_id), '%Y-%m-%d').date()
    backup_account_inf = ''

    account_is_ind = (account_email and account_email.endswith('_ind'))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏

    password = await get_account_password(account_email)
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (—É–¥–∞–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å "_ind")
    account_email_display = f"<code>{account_email[:-4]}</code>" if account_email.endswith(
        '_ind') else f"<code>{account_email}</code>"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    formatted_expiration_date = expiration_date.strftime('%d.%m.%Y')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    if await check_user_backup_account(user_id):
        email_backup_account = await get_user_backup_account(user_id)
        backup_account_password = await get_backup_account_password(email_backup_account)
        backup_account_inf = (
            f"\n\n<b>=============================</b>\n"
            f"<b><i>–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:</i></b>\n\n"
            f"<b><i>–õ–æ–≥–∏–Ω:</i></b> <code>{email_backup_account}</code>\n"
            f"<b><i>–ü–∞—Ä–æ–ª—å:</i></b> <code>{backup_account_password}</code>\n\n"
            f"<b>=============================</b>"
        )

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = (
        f"<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</b> <u>{formatted_expiration_date}</u>\n\n"
        f"ü™™ <b>–õ–æ–≥–∏–Ω ChatGPT:</b> {account_email_display} \n"
        f"<b>üîê –ü–∞—Ä–æ–ª—å:</b> {f'<code>{password}</code>' if password else '–Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä–æ–ª—è'}"
        f"{backup_account_inf}"
    )
    # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π, —Ç–æ –Ω–µ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    if account_is_ind:
        await bot.edit_message_text(chat_id=message.chat.id,
                                    message_id=message.message_id,
                                    text=profile_text,
                                    parse_mode=ParseMode.HTML, reply_markup=back_to_menu_inline_kb())
    else:

        await bot.edit_message_text(chat_id=message.chat.id,
                                    message_id=message.message_id,
                                    text=profile_text,
                                    reply_markup=requests_have_ended_inline_kb(),
                                    parse_mode=ParseMode.HTML)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
@router.callback_query(F.data == "req_have_ended")
async def req_have_ended(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ä–æ–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    date_expiration = await get_user_expiration_date(user_id)
    expiration_valid = date_expiration and datetime.strptime(date_expiration.strip(),
                                                             '%Y-%m-%d').date() > datetime.now().date()

    used_backup_account_date = await get_used_backup_account_date(user_id)
    backup_available = True

    if used_backup_account_date:
        used_backup_account_date = datetime.strptime(used_backup_account_date.strip(), '%Y-%m-%d %H:%M:%S')
        if used_backup_account_date + timedelta(days=3) > datetime.now():
            backup_available = False

    if not expiration_valid:
        backup_available = False

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —É—Å–ª–æ–≤–∏–π
    text = (
        "–ï—Å–ª–∏ –∏—Å—á–µ—Ä–ø–∞–ª—Å—è –ª–∏–º–∏—Ç, —É –Ω–∞—Å –µ—Å—Ç—å –¥–ª—è –í–∞—Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏."
        " –û–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –¥–Ω—è. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 3 –¥–Ω—è."
        if backup_available else
        "–í—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç. –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 3 –¥–Ω—è."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await bot.edit_message_text(chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                text=text,
                                reply_markup=backup_account_inline_kb(backup_available))
